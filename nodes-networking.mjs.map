{"version":3,"sources":["_init.js","HTTP/Request.js","WebSocket/Client.js","utils/NodeToast.js","HTTP/Data/Send/URLEncoded.js","WebSocket/Event/Close.js","WebSocket/Event/Error.js","WebSocket/Event/Message.js","WebSocket/Event/Open.js","WebSocket/Instance/Close.js","WebSocket/Instance/Send.js","HTTP/Data/Receive/Blob.js","HTTP/Data/Receive/FormData.js","HTTP/Data/Receive/JSON.js","HTTP/Data/Receive/Text.js","HTTP/Data/Send/Binary.js","HTTP/Data/Send/Multipart.js","HTTP/Data/Send/TextPlain.js"],"names":["window","module","_class2","_class3","_class4","_class5","_class6","_class7","_class8","_class9","_class10","_class11","_class12","_class13","_class14","_class15","_class16","_class17","exports","globalThis","Object","defineProperty","value","Blackprint","loadScope","url","import","meta","hasInterface","hasDocs","WebSocket","addEventListener","on","removeEventListener","off","Context","createContext","EventSlot","slot","registerNode","Node","constructor","instance","super","iface","this","setInterface","title","_toast","NodeToast","async","Input","Output","ref","toast","URL","Method","warn","craft","method","toUpperCase","cache","redirect","headers","Headers","Body","type","body","data","Query","includes","fetch","e","error","message","success","Status","status","Success","input","Trigger","Port","port","node","trigger","String","Default","VirtualType","output","Response","Number","Boolean","update","temp","ReconnectableWebSocket","binaryType","BinaryType","_reconnectInterval","ReconnectInterval","connect","Client","_url","_closed","_Ev_close","ev","emit","setTimeout","_connect","_Ev_open","clear","_Ev_message","_Ev_error","bufferedAmount","_ws","extensions","protocol","readyState","_destroy","ws","send","apply","arguments","close","dispatchEvent","Error","assign","prototype","Engine","CustomEvent","haveInfo","destroy","haveWarn","haveError","_reduceText","text","replace","full","slice","info","$decoration","_raw","serializeQuery","params","keys","key","val","Array","push","encodeURIComponent","valKey","i","length","join","_unlisten","client","callback","Close","Event","isBinary","TextMessage","BinaryMessage","Union","ArrayBuffer","Blob","Open","closeTrigger","Socket","Code","Reason","Data","Uint8Array","Send","blob","formData","FormData","json","imported","deletePort","createPort","name","append","registerInterface","IFace","HTTPDataSendMultipart","Interface","exportData","HTTPDataSendURLEncoded"],"mappings":"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","file":"nodes-networking.mjs","sourcesContent":["// This script will run first, and then the other files\n// depends on blackprint.config.js configuration\n\n//> Required, this should be run before importing modules\n//> Blackprint will know if it need to load other interface module\n// Let the Blackprint Editor know the source URL where\n// the registerNode and registerInterface belongs to\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n\n\t// This will autoload (*.sf.mjs) and (*.sf.css) file for Browser\n\thasInterface: true,\n\n\t// This will autoload (*.docs.json) for Browser\n\thasDocs: true,\n});\n\n// For Browser & Deno\nlet WebSocket = globalThis.WebSocket;\n\n// For Node.js\nif(WebSocket == null){\n\tWebSocket = (await import('ws')).WebSocket;\n\tWebSocket.addEventListener = WebSocket.on;\n\tWebSocket.removeEventListener = WebSocket.off;\n}\n\n// Global shared context (share to _init.sf)\nlet Context = Blackprint.createContext('Networking');\n\n// This is needed to avoid duplicated event listener when using hot reload\n// Event listener that registered with same slot will be replaced\nContext.EventSlot = {slot: 'my-private-event-slot'};","/**\n * Perform HTTP request to an URL\n * @summary Perform HTTP request to an URL\n * @blackprint node\n */\nBlackprint.registerNode(\"Networking/HTTP/Request\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tTrigger: Blackprint.Port.Trigger(port => port.iface.node.trigger()),\n\t\tURL: String,\n\t\t/** HTTP method: GET, POST, PUT, DELETE */\n\t\tMethod: Blackprint.Port.Default(String, 'GET'),\n\t\t/** Request headers */\n\t\tHeaders: Object,\n\t\t/** Request query, will be appended on URL */\n\t\tQuery: Context.VirtualType(Object, 'URLEncoded'),\n\t\t/** Request body */\n\t\tBody: Context.VirtualType(Object, ['BodyEncoded', 'URLEncoded']),\n\t};\n\tstatic output = {\n\t\t/**\n\t\t * Response body that need to be casted before being consumed\n\t\t * Note: You can only cast once, re-send request if needed\n\t\t */\n\t\tBody: Response,\n\t\t/** Response headers */\n\t\tHeaders: Object,\n\t\t/**\n\t\t * HTTP Status\n\t\t * can be 0 if host was not found, blocked by CORS, or other error\n\t\t */\n\t\tStatus: Number,\n\t\t/** True if the response was 200 OK (or in range 200 ~ 299)*/\n\t\tSuccess: Boolean,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"HTTP Request\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync trigger(){\n\t\tlet { Input, Output } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(!Input.URL || !Input.Method)\n\t\t\treturn toast.warn(\"URL and Method must not be empty string\");\n\n\t\tlet craft = {\n\t\t\tmethod: Input.Method.toUpperCase(),\n\t\t\tcache: 'no-cache',\n\t\t\tredirect: 'follow',\n\t\t\theaders: Input.Headers ?? {},\n\t\t};\n\n\t\tif(Input.Body != null){\n\t\t\tcraft.headers['Content-Type'] = Input.Body.type;\n\t\t\tcraft.body = Input.Body.data;\n\t\t}\n\n\t\tlet data = null;\n\t\tlet url = Input.URL;\n\n\t\tif(Input.Query != null)\n\t\t\turl += (url.includes('?') ? '&' : '?') + Input.Query.data;\n\n\t\ttry {\n\t\t\ttoast.warn(\"Requesting\");\n\t\t\tdata = await fetch(url, craft);\n\t\t\ttoast.warn();\n\t\t} catch(e) {\n\t\t\ttoast.error(e.message);\n\t\t}\n\n\t\tOutput.Body = data;\n\n\t\tif(data != null){\n\t\t\ttoast.success(\"Success\");\n\t\t\tOutput.Headers = data.headers;\n\t\t\tOutput.Status = data.status;\n\t\t\tOutput.Success = true;\n\t\t}\n\t\telse{\n\t\t\ttoast.warn(\"Request failed\");\n\t\t\tOutput.Headers = null;\n\t\t\tOutput.Status = 0;\n\t\t\tOutput.Success = false;\n\t\t}\n\t}\n});","/**\n * Create client instance for WebSocket connection\n * @summary WebSocket\n * @blackprint node\n */\nBlackprint.registerNode(\"Networking/WebSocket/Client\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** WebSocket server's URL */\n\t\tURL: String,\n\t\tBinaryType: Blackprint.Port.Default(String, \"arraybuffer\"),\n\t\tReconnectInterval: Blackprint.Port.Default(Number, 3000),\n\t};\n\tstatic output = {\n\t\tClient: WebSocket,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"WebSocket Client\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tif(!Input.URL) return;\n\n\t\tlet temp = new ReconnectableWebSocket(Input.URL, this._toast);\n\t\ttemp.binaryType = Input.BinaryType;\n\t\ttemp._reconnectInterval = Input.ReconnectInterval;\n\n\t\ttemp.connect();\n\t\tOutput.Client = temp;\n\t}\n});\n\nclass ReconnectableWebSocket extends WebSocket {\n\tconstructor(url, _toast){\n\t\tthis._url = url;\n\t\tthis._toast = _toast;\n\t\tthis._closed = false;\n\n\t\tthis._Ev_close = ev => {\n\t\t\t_toast.warn(\"Disconnected\");\n\t\t\tthis.emit('close', ev);\n\t\t\tsetTimeout(() => this._connect(), this._reconnectInterval);\n\t\t};\n\t\tthis._Ev_open = ev => { _toast.clear(); _toast.success(\"Connected\"); this.emit('open', ev); }\n\t\tthis._Ev_message = ev => { this.emit('message', ev); }\n\t\tthis._Ev_error = ev => { _toast.error(\"Error\"); this.emit('error', ev); }\n\t}\n\n\tget bufferedAmount(){ return this._ws.bufferedAmount }\n\tget extensions(){ return this._ws.extensions }\n\tget protocol(){ return this._ws.protocol }\n\tget readyState(){ return this._ws.readyState }\n\tget url(){ return this._ws.url }\n\n\tconnect(){\n\t\tthis._closed = false;\n\t\tthis._connect();\n\t}\n\n\t_connect(){\n\t\tthis._ws?._destroy();\n\t\tthis._toast.warn(\"Connecting\");\n\n\t\tlet ws = this._ws = new WebSocket(this._url);\n\t\tws.binaryType = this.binaryType;\n\n\t\tws.addEventListener('close', this._Ev_close);\n\t\tws.addEventListener('open', this._Ev_open);\n\t\tws.addEventListener('message', this._Ev_message);\n\t\tws.addEventListener('error', this._Ev_error);\n\n\t\tws._destroy = function(){\n\t\t\tws.removeEventListener('close', this._Ev_close);\n\t\t\tws.removeEventListener('open', this._Ev_open);\n\t\t\tws.removeEventListener('message', this._Ev_message);\n\t\t\tws.removeEventListener('error', this._Ev_error);\n\t\t}\n\t}\n\n\tsend(){\n\t\tthis._ws.send.apply(this._ws, arguments);\n\t}\n\n\tclose(){\n\t\tif(this._ws == null) return;\n\n\t\tthis._ws.close.apply(this._ws, arguments);\n\t\tthis._closed = true;\n\n\t\tthis._ws._destroy();\n\t}\n\n\taddEventListener(){ this.on.apply(this, arguments) }\n\tremoveEventListener(){ this.off.apply(this, arguments) }\n\tdispatchEvent(){ throw new Error(\"Not implemented\") }\n}\n\n// Extends prototype with CustomEvent\nObject.assign(ReconnectableWebSocket.prototype, Blackprint.Engine.CustomEvent.prototype);","/**\n * import { Context } from \"./_init.js\";\n */\n\n// Bootstrap for add toast on node decoration\nlet NodeToast = Context.NodeToast = class NodeToast { // eslint-disable-line\n\tconstructor(iface){\n\t\tthis.iface = iface;\n\t}\n\n\tclear(){\n\t\tif(this.haveInfo)\n\t\t\tthis.haveInfo.destroy();\n\t\tif(this.haveWarn)\n\t\t\tthis.haveWarn.destroy();\n\t\tif(this.haveError)\n\t\t\tthis.haveError.destroy();\n\n\t\tthis.haveInfo = false;\n\t\tthis.haveWarn = false;\n\t\tthis.haveError = false;\n\t}\n\n\t_reduceText(text){\n\t\treturn text.replace(/\\w{15,}/g, full => full.slice(0, 5)+'...');\n\t}\n\n\tinfo(text){\n\t\tif(!this.iface.$decoration) return;\n\t\tlet temp = text;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveInfo)\n\t\t\tthis.haveInfo.text = text;\n\t\telse\n\t\t\tthis.haveInfo = this.iface.$decoration.info(text);\n\n\t\tthis.haveInfo._raw = temp;\n\t}\n\n\twarn(text){\n\t\tif(!this.iface.$decoration) return;\n\t\tlet temp = text;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveWarn)\n\t\t\tthis.haveWarn.text = text;\n\t\telse\n\t\t\tthis.haveWarn = this.iface.$decoration.warn(text);\n\n\t\tthis.haveWarn._raw = temp;\n\t}\n\n\terror(text){\n\t\tif(!this.iface.$decoration) return;\n\t\tlet temp = text;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveError)\n\t\t\tthis.haveError.text = text;\n\t\telse\n\t\t\tthis.haveError = this.iface.$decoration.error(text);\n\n\t\tthis.haveError._raw = temp;\n\t}\n\n\tsuccess(text){\n\t\tif(!this.iface.$decoration) return;\n\t\tlet ref = this.iface.$decoration.success(this._reduceText(text));\n\t\tref._raw = text;\n\t}\n}","/**\n * @summary HTTP Data Send\n * @blackprint\n */\nBlackprint.registerNode(\"Networking/HTTP/Data/Send/URLEncoded\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** You can right click this port to create a new port */\n\t\tdata: String,\n\t};\n\tstatic output = {\n\t\tData: Context.VirtualType(Object, \"URLEncoded\"),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface(\"BPIC/Networking/HTTP/Data/Send/URLEncoded\");\n\t\tiface.title = \"URL Encoded\";\n\t}\n\n\timported(data){\n\t\tlet input = data?.input;\n\t\tif(input == null) return;\n\t\tthis.deletePort('input', 'data');\n\n\t\tfor (let i=0; i < input.length; i++) {\n\t\t\tthis.createPort('input', input[i], String);\n\t\t}\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.Data = {\n\t\t\ttype: 'application/x-www-form-urlencoded',\n\t\t\tdata: serializeQuery(Input),\n\t\t};\n\t}\n});\n\nBlackprint.registerInterface(\"BPIC/Networking/HTTP/Data/Send/URLEncoded\",\nContext.IFace.HTTPDataSendURLEncoded = class extends Blackprint.Interface{\n\texportData(){\n\t\treturn {\n\t\t\tinput: Object.keys(this.input)\n\t\t}\n\t}\n});\n\nfunction serializeQuery(params) {\n\tconst keys = [];\n\tfor(let key in params){\n\t\tconst val = params[key];\n\t\tif (val.constructor === Array){\n\t\t\tfor (let i = 0; i < val.length; i++)\n\t\t\t\tkeys.push(`${key}[]=${encodeURIComponent(val[i])}`);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif(val.constructor === Object){\n\t\t\tfor(let valKey in val)\n\t\t\t\tkeys.push(`${key}[${valKey}]=${encodeURIComponent(val[valKey])}`);\n\t\t\tcontinue;\n\t\t}\n\n\t\tkeys.push(`${key}=${encodeURIComponent(val)}`);\n\t}\n\n\treturn keys.join('&');\n}","/**\n * Listen on connection close\n * @summary WebSocket\n * @blackprint node\n */\nBlackprint.registerNode(\"Networking/WebSocket/Event/Close\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tClient: WebSocket,\n\t};\n\tstatic output = {\n\t\tEvent: Event,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"On Close\";\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tthis._unlisten?.();\n\n\t\tlet client = Input.Client;\n\t\tlet callback = ev => { Output.Close = ev; }\n\n\t\tclient.on('close', callback);\n\t\tthis._unlisten = ()=> client.off('close', callback);\n\t}\n\n\tdestroy(){\n\t\tthis._unlisten?.();\n\t}\n});","/**\n * Listen on error\n * @summary WebSocket\n * @blackprint node\n */\nBlackprint.registerNode(\"Networking/WebSocket/Event/Error\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tClient: WebSocket,\n\t};\n\tstatic output = {\n\t\tEvent: Event,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"On Error\";\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tthis._unlisten?.();\n\n\t\tlet client = Input.Client;\n\t\tlet callback = ev => { Output.Error = ev; }\n\n\t\tclient.on('error', callback);\n\t\tthis._unlisten = ()=> client.off('error', callback);\n\t}\n\n\tdestroy(){\n\t\tthis._unlisten?.();\n\t}\n});","/**\n * Listen on new message\n * @summary WebSocket\n * @blackprint node\n */\nBlackprint.registerNode(\"Networking/WebSocket/Event/Message\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tClient: WebSocket,\n\t};\n\tstatic output = {\n\t\t/** Text message received from remote */\n\t\tTextMessage: String,\n\t\t/** Binary message received from remote */\n\t\tBinaryMessage: Blackprint.Port.Union([ArrayBuffer, Blob]),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"On Message\";\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tthis._unlisten?.();\n\n\t\tlet client = Input.Client;\n\t\tlet callback = function(ev, isBinary){\n\t\t\tif(!isBinary && ev.data instanceof String)\n\t\t\t\tOutput.TextMessage = ev.data;\n\t\t\telse Output.BinaryMessage = ev.data;\n\t\t}\n\n\t\tclient.on('message', callback);\n\t\tthis._unlisten = ()=> client.off('message', callback);\n\t}\n\n\tdestroy(){\n\t\tthis._unlisten?.();\n\t}\n});","/**\n * Listen on connection open\n * For Client\n * @summary WebSocket\n * @blackprint node\n */\nBlackprint.registerNode(\"Networking/WebSocket/Event/Open\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tClient: WebSocket,\n\t};\n\tstatic output = {\n\t\tEvent: Event,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"On Open\";\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tthis._unlisten?.();\n\n\t\tlet client = Input.Client;\n\t\tlet callback = ev => { Output.Open = ev; }\n\n\t\tclient.on('open', callback);\n\t\tthis._unlisten = ()=> client.off('open', callback);\n\t}\n\n\tdestroy(){\n\t\tthis._unlisten?.();\n\t}\n});","/**\n * Close WebSocket connection\n * @summary WebSocket\n * @blackprint node\n */\nBlackprint.registerNode(\"Networking/WebSocket/Instance/Close\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tSocket: WebSocket,\n\t\tTrigger: Blackprint.Port.Trigger(port => port.iface.node.closeTrigger()),\n\t\tCode: Blackprint.Port.Default(Number, 1000),\n\t\tReason: String,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Close connection\";\n\t}\n\n\tcloseTrigger(){\n\t\tlet { Input, Output } = this.ref;\n\t\tif(!Input.Socket) return;\n\n\t\tInput.Socket.close(Input.Code, Input.Reason);\n\t}\n});","/**\n * Send data via WebSocket\n * @summary WebSocket\n * @blackprint node\n */\nBlackprint.registerNode(\"Networking/WebSocket/Instance/Send\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tSocket: WebSocket,\n\t\tData: Blackprint.Port.Union([String, ArrayBuffer, Blob, Uint8Array]),\n\t\tSend: Blackprint.Port.Trigger(port => port.iface.node.send()),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Send data\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tsend(){\n\t\tlet { Input } = this.ref;\n\t\tlet toast = this._toast;\n\n\t\tif(!Input.Socket) return toast.warn(\"Socket is required\");\n\t\tif(!Input.Data) return toast.warn(\"Data is required\");\n\n\t\ttoast.clear();\n\n\t\tInput.Socket.send(Input.Data);\n\t}\n});","/**\n * @summary HTTP Data Receive\n * @blackprint\n */\nBlackprint.registerNode(\"Networking/HTTP/Data/Receive/Blob\",\nclass extends Blackprint.Node {\n\tstatic input = {Body: Response};\n\tstatic output = {Data: Blob};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"As Blob\";\n\t}\n\tasync update(){\n\t\tlet { Input, Output } = this.ref;\n\t\tif(Input.Body == null) return;\n\n\t\tOutput.Data = await Input.Body.blob();\n\t}\n});","/**\n * @summary HTTP Data Receive\n * @blackprint\n */\nBlackprint.registerNode(\"Networking/HTTP/Data/Receive/FormData\",\nclass extends Blackprint.Node {\n\tstatic input = {Body: Response};\n\tstatic output = {Data: FormData};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"As FormData\";\n\t}\n\tasync update(){\n\t\tlet { Input, Output } = this.ref;\n\t\tif(Input.Body == null) return;\n\n\t\tOutput.Data = await Input.Body.formData();\n\t}\n});","/**\n * @summary HTTP Data Receive\n * @blackprint\n */\nBlackprint.registerNode(\"Networking/HTTP/Data/Receive/JSON\",\nclass extends Blackprint.Node {\n\tstatic input = {Body: Response};\n\tstatic output = {Data: Object};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"As JSON\";\n\t}\n\tasync update(){\n\t\tlet { Input, Output } = this.ref;\n\t\tif(Input.Body == null) return;\n\n\t\tOutput.Data = await Input.Body.json();\n\t}\n});","/**\n * @summary HTTP Data Receive\n * @blackprint\n */\nBlackprint.registerNode(\"Networking/HTTP/Data/Receive/Text\",\nclass extends Blackprint.Node {\n\tstatic input = {Body: Response};\n\tstatic output = {Data: String};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"As Text\";\n\t}\n\tasync update(){\n\t\tlet { Input, Output } = this.ref;\n\t\tif(Input.Body == null) return;\n\n\t\tOutput.Data = await Input.Body.text();\n\t}\n});","/**\n * @summary HTTP Data Send\n * @blackprint\n */\nBlackprint.registerNode(\"Networking/HTTP/Data/Send/Binary\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tData: Blackprint.Port.Union([Uint8Array, Blob]),\n\t};\n\tstatic output = {\n\t\tData: Context.VirtualType(Object, \"BodyEncoded\"),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Binary\";\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\n\t\tOutput.Data = {\n\t\t\ttype: 'application/octet-stream',\n\t\t\tdata: Input.Data,\n\t\t};\n\t}\n});","/**\n * @summary HTTP Data Send\n * @blackprint\n */\nBlackprint.registerNode(\"Networking/HTTP/Data/Send/Multipart\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** You can right click this port to create a new port */\n\t\tdata: Blackprint.Port.Union([String, Number, Uint8Array, Blob]),\n\t};\n\tstatic output = {\n\t\tData: Context.VirtualType(Object, \"BodyEncoded\"),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface(\"BPIC/Networking/HTTP/Data/Send/Multipart\");\n\t\tiface.title = \"Multipart\";\n\t}\n\n\timported(data){\n\t\tlet input = data?.input;\n\t\tif(input == null) return;\n\t\tthis.deletePort('input', 'data');\n\n\t\tlet type = Blackprint.Port.Union([String, Number, Uint8Array, Blob]);\n\t\tfor (let i=0; i < input.length; i++) {\n\t\t\tthis.createPort('input', input[i], type);\n\t\t}\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tlet data = new FormData();\n\t\tfor(var name in Input){\n\t\t\tconst val = Input[name];\n\n\t\t\tif(val.constructor === Array){\n\t\t\t\tfor (let i = 0; i < val.length; i++)\n\t\t\t\t\tdata.append(`${name}[]`, val[i]);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(val.constructor === Object){\n\t\t\t\tfor(let valKey in val)\n\t\t\t\t\tdata.append(`${name}[${valKey}]`, val[valKey]);\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdata.append(name, val);\n\t\t}\n\n\t\tOutput.Data = {\n\t\t\ttype: 'multipart/form-data', data,\n\t\t};\n\t}\n});\n\n// If without sketch\nBlackprint.registerInterface(\"BPIC/Networking/HTTP/Data/Send/Multipart\",\nContext.IFace.HTTPDataSendMultipart = class extends Blackprint.Interface {\n\texportData(){\n\t\treturn {\n\t\t\tinput: Object.keys(this.input)\n\t\t}\n\t}\n});","/**\n * @summary HTTP Data Send\n * @blackprint\n */\nBlackprint.registerNode(\"Networking/HTTP/Data/Send/TextPlain\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\t/** You can right click this port to create a new port */\n\t\tData: String,\n\t};\n\tstatic output = {\n\t\tData: Context.VirtualType(Object, \"BodyEncoded\"),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Text Plain\";\n\t}\n\n\tupdate(){\n\t\tlet { Input, Output } = this.ref;\n\t\tOutput.Data = {\n\t\t\ttype: 'text/plain',\n\t\t\tdata: Input.Data,\n\t\t};\n\t}\n});"]}