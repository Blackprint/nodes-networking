/* MIT Licensed */
!async function(e,t){"use strict";var r,s,n,o,i,a,u,c,d,l,p,h,f,g,y,_;t.exports&&t.exports!==globalThis&&Object.defineProperty(t.exports,"__esModule",{value:!0});let v=e.Blackprint.loadScope({url:import.meta.url,hasInterface:!0,hasDocs:!0}),w=globalThis.WebSocket;null==w&&(w=(await import("ws")).WebSocket,w.addEventListener=w.on,w.removeEventListener=w.off);let T=v.createContext("Networking");T.EventSlot={slot:"my-private-event-slot"},v.registerNode("Networking/HTTP/Request",((r=class extends v.Node{constructor(e){super(e);let t=this.setInterface();t.title="HTTP Request",this._toast=new N(t)}async trigger(){let{Input:e,Output:t}=this.ref,r=this._toast;if(!e.URL||!e.Method)return r.warn("URL and Method must not be empty string");let s={method:e.Method.toUpperCase(),cache:"no-cache",redirect:"follow",headers:e.Headers??{}};null!=e.Body&&(s.headers["Content-Type"]=e.Body.type,s.body=e.Body.data);let n=null,o=e.URL;null!=e.Query&&(o+=(o.includes("?")?"&":"?")+e.Query.data);try{r.warn("Requesting"),n=await fetch(o,s),r.warn()}catch(e){r.error(e.message)}t.Body=n,null!=n?(r.success("Success"),t.Headers=n.headers,t.Status=n.status,t.Success=!0):(r.warn("Request failed"),t.Headers=null,t.Status=0,t.Success=!1)}}).input={Trigger:v.Port.Trigger((e=>e.iface.node.trigger())),URL:String,Method:v.Port.Default(String,"GET"),Headers:Object,Query:T.VirtualType(Object,"URLEncoded"),Body:T.VirtualType(Object,["BodyEncoded","URLEncoded"])},r.output={Body:Response,Headers:Object,Status:Number,Success:Boolean},r)),v.registerNode("Networking/WebSocket/Client",((s=class extends v.Node{constructor(e){super(e);let t=this.setInterface();t.title="WebSocket Client",this._toast=new N(t)}update(){let{Input:e,Output:t}=this.ref;if(!e.URL)return;let r=new E(e.URL,this._toast);r.binaryType=e.BinaryType,r._reconnectInterval=e.ReconnectInterval,r.connect(),t.Client=r}}).input={URL:String,BinaryType:v.Port.Default(String,"arraybuffer"),ReconnectInterval:v.Port.Default(Number,3e3)},s.output={Client:w},s));class E extends w{constructor(e,t){this._url=e,this._toast=t,this._closed=!1,this._Ev_close=e=>{t.warn("Disconnected"),this.emit("close",e),setTimeout((()=>this._connect()),this._reconnectInterval)},this._Ev_open=e=>{t.clear(),t.success("Connected"),this.emit("open",e)},this._Ev_message=e=>{this.emit("message",e)},this._Ev_error=e=>{t.error("Error"),this.emit("error",e)}}get bufferedAmount(){return this._ws.bufferedAmount}get extensions(){return this._ws.extensions}get protocol(){return this._ws.protocol}get readyState(){return this._ws.readyState}get url(){return this._ws.url}connect(){this._closed=!1,this._connect()}_connect(){this._ws?._destroy(),this._toast.warn("Connecting");let e=this._ws=new w(this._url);e.binaryType=this.binaryType,e.addEventListener("close",this._Ev_close),e.addEventListener("open",this._Ev_open),e.addEventListener("message",this._Ev_message),e.addEventListener("error",this._Ev_error),e._destroy=function(){e.removeEventListener("close",this._Ev_close),e.removeEventListener("open",this._Ev_open),e.removeEventListener("message",this._Ev_message),e.removeEventListener("error",this._Ev_error)}}send(){this._ws.send.apply(this._ws,arguments)}close(){null!=this._ws&&(this._ws.close.apply(this._ws,arguments),this._closed=!0,this._ws._destroy())}addEventListener(){this.on.apply(this,arguments)}removeEventListener(){this.off.apply(this,arguments)}dispatchEvent(){throw new Error("Not implemented")}}Object.assign(E.prototype,v.Engine.CustomEvent.prototype);let N=T.NodeToast=class{constructor(e){this.iface=e}clear(){this.haveInfo&&this.haveInfo.destroy(),this.haveWarn&&this.haveWarn.destroy(),this.haveError&&this.haveError.destroy(),this.haveInfo=!1,this.haveWarn=!1,this.haveError=!1}_reduceText(e){return e.replace(/\w{15,}/g,(e=>e.slice(0,5)+"..."))}info(e){if(!this.iface.$decoration)return;let t=e;e=this._reduceText(e),this.haveInfo?this.haveInfo.text=e:this.haveInfo=this.iface.$decoration.info(e),this.haveInfo._raw=t}warn(e){if(!this.iface.$decoration)return;let t=e;e=this._reduceText(e),this.haveWarn?this.haveWarn.text=e:this.haveWarn=this.iface.$decoration.warn(e),this.haveWarn._raw=t}error(e){if(!this.iface.$decoration)return;let t=e;e=this._reduceText(e),this.haveError?this.haveError.text=e:this.haveError=this.iface.$decoration.error(e),this.haveError._raw=t}success(e){if(!this.iface.$decoration)return;this.iface.$decoration.success(this._reduceText(e))._raw=e}};function I(e){const t=[];for(let r in e){const s=e[r];if(s.constructor!==Array)if(s.constructor!==Object)t.push(`${r}=${encodeURIComponent(s)}`);else for(let e in s)t.push(`${r}[${e}]=${encodeURIComponent(s[e])}`);else for(let e=0;e<s.length;e++)t.push(`${r}[]=${encodeURIComponent(s[e])}`)}return t.join("&")}v.registerNode("Networking/WebSocket/Event/Close",((n=class extends v.Node{constructor(e){super(e),this.setInterface().title="On Close"}update(){let{Input:e,Output:t}=this.ref;this._unlisten?.();let r=e.Client,s=e=>{t.Close=e};r.on("close",s),this._unlisten=()=>r.off("close",s)}destroy(){this._unlisten?.()}}).input={Client:w},n.output={Event:Event},n)),v.registerNode("Networking/WebSocket/Event/Error",((o=class extends v.Node{constructor(e){super(e),this.setInterface().title="On Error"}update(){let{Input:e,Output:t}=this.ref;this._unlisten?.();let r=e.Client,s=e=>{t.Error=e};r.on("error",s),this._unlisten=()=>r.off("error",s)}destroy(){this._unlisten?.()}}).input={Client:w},o.output={Event:Event},o)),v.registerNode("Networking/WebSocket/Event/Message",((i=class extends v.Node{constructor(e){super(e),this.setInterface().title="On Message"}update(){let{Input:e,Output:t}=this.ref;this._unlisten?.();let r=e.Client,s=function(e,r){!r&&e.data instanceof String?t.TextMessage=e.data:t.BinaryMessage=e.data};r.on("message",s),this._unlisten=()=>r.off("message",s)}destroy(){this._unlisten?.()}}).input={Client:w},i.output={TextMessage:String,BinaryMessage:v.Port.Union([ArrayBuffer,Blob])},i)),v.registerNode("Networking/WebSocket/Event/Open",((a=class extends v.Node{constructor(e){super(e),this.setInterface().title="On Open"}update(){let{Input:e,Output:t}=this.ref;this._unlisten?.();let r=e.Client,s=e=>{t.Open=e};r.on("open",s),this._unlisten=()=>r.off("open",s)}destroy(){this._unlisten?.()}}).input={Client:w},a.output={Event:Event},a)),v.registerNode("Networking/WebSocket/Instance/Close",((u=class extends v.Node{constructor(e){super(e),this.setInterface().title="Close connection"}closeTrigger(){let{Input:e,Output:t}=this.ref;e.Socket&&e.Socket.close(e.Code,e.Reason)}}).input={Socket:w,Trigger:v.Port.Trigger((e=>e.iface.node.closeTrigger())),Code:v.Port.Default(Number,1e3),Reason:String},u)),v.registerNode("Networking/WebSocket/Instance/Send",((c=class extends v.Node{constructor(e){super(e);let t=this.setInterface();t.title="Send data",this._toast=new N(t)}send(){let{Input:e}=this.ref,t=this._toast;return e.Socket?e.Data?(t.clear(),void e.Socket.send(e.Data)):t.warn("Data is required"):t.warn("Socket is required")}}).input={Socket:w,Data:v.Port.Union([String,ArrayBuffer,Blob,Uint8Array]),Send:v.Port.Trigger((e=>e.iface.node.send()))},c)),v.registerNode("Networking/HTTP/Data/Receive/Blob",((d=class extends v.Node{constructor(e){super(e),this.setInterface().title="As Blob"}async update(){let{Input:e,Output:t}=this.ref;null!=e.Body&&(t.Data=await e.Body.blob())}}).input={Body:Response},d.output={Data:Blob},d)),v.registerNode("Networking/HTTP/Data/Receive/FormData",((l=class extends v.Node{constructor(e){super(e),this.setInterface().title="As FormData"}async update(){let{Input:e,Output:t}=this.ref;null!=e.Body&&(t.Data=await e.Body.formData())}}).input={Body:Response},l.output={Data:FormData},l)),v.registerNode("Networking/HTTP/Data/Receive/JSON",((p=class extends v.Node{constructor(e){super(e),this.setInterface().title="As JSON"}async update(){let{Input:e,Output:t}=this.ref;null!=e.Body&&(t.Data=await e.Body.json())}}).input={Body:Response},p.output={Data:Object},p)),v.registerNode("Networking/HTTP/Data/Receive/Text",((h=class extends v.Node{constructor(e){super(e),this.setInterface().title="As Text"}async update(){let{Input:e,Output:t}=this.ref;null!=e.Body&&(t.Data=await e.Body.text())}}).input={Body:Response},h.output={Data:String},h)),v.registerNode("Networking/HTTP/Data/Send/Binary",((f=class extends v.Node{constructor(e){super(e),this.setInterface().title="Binary"}update(){let{Input:e,Output:t}=this.ref;t.Data={type:"application/octet-stream",data:e.Data}}}).input={Data:v.Port.Union([Uint8Array,Blob])},f.output={Data:T.VirtualType(Object,"BodyEncoded")},f)),v.registerNode("Networking/HTTP/Data/Send/Multipart",((g=class extends v.Node{constructor(e){super(e),this.setInterface("BPIC/Networking/HTTP/Data/Send/Multipart").title="Multipart"}imported(e){let t=e?.input;if(null==t)return;this.deletePort("input","data");let r=v.Port.Union([String,Number,Uint8Array,Blob]);for(let e=0;e<t.length;e++)this.createPort("input",t[e],r)}update(){let{Input:e,Output:t}=this.ref,r=new FormData;for(var s in e){const t=e[s];if(t.constructor!==Array)if(t.constructor!==Object)r.append(s,t);else for(let e in t)r.append(`${s}[${e}]`,t[e]);else for(let e=0;e<t.length;e++)r.append(`${s}[]`,t[e])}t.Data={type:"multipart/form-data",data:r}}}).input={data:v.Port.Union([String,Number,Uint8Array,Blob])},g.output={Data:T.VirtualType(Object,"BodyEncoded")},g)),v.registerInterface("BPIC/Networking/HTTP/Data/Send/Multipart",T.IFace.HTTPDataSendMultipart=class extends v.Interface{exportData(){return{input:Object.keys(this.input)}}}),v.registerNode("Networking/HTTP/Data/Send/TextPlain",((y=class extends v.Node{constructor(e){super(e),this.setInterface().title="Text Plain"}update(){let{Input:e,Output:t}=this.ref;t.Data={type:"text/plain",data:e.Data}}}).input={Data:String},y.output={Data:T.VirtualType(Object,"BodyEncoded")},y)),v.registerNode("Networking/HTTP/Data/Send/URLEncoded",((_=class extends v.Node{constructor(e){super(e),this.setInterface("BPIC/Networking/HTTP/Data/Send/URLEncoded").title="URL Encoded"}imported(e){let t=e?.input;if(null!=t){this.deletePort("input","data");for(let e=0;e<t.length;e++)this.createPort("input",t[e],String)}}update(){let{Input:e,Output:t}=this.ref;t.Data={type:"application/x-www-form-urlencoded",data:I(e)}}}).input={data:String},_.output={Data:T.VirtualType(Object,"URLEncoded")},_)),v.registerInterface("BPIC/Networking/HTTP/Data/Send/URLEncoded",T.IFace.HTTPDataSendURLEncoded=class extends v.Interface{exportData(){return{input:Object.keys(this.input)}}})}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:this,"undefined"!=typeof module?module:{exports:this});
//# sourceMappingURL=nodes-networking.mjs.map